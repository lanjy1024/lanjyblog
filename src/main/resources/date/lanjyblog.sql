/*
SQLyog Ultimate v12.09 (64 bit)
MySQL - 5.7.15 : Database - lanjyblog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`lanjyblog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `lanjyblog`;

/*Table structure for table `hibernate_sequence` */

DROP TABLE IF EXISTS `hibernate_sequence`;

CREATE TABLE `hibernate_sequence` (
  `next_val` bigint(20) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

/*Data for the table `hibernate_sequence` */

insert  into `hibernate_sequence`(`next_val`) values (11),(11),(11),(11),(11);

/*Table structure for table `t_blog` */

DROP TABLE IF EXISTS `t_blog`;

CREATE TABLE `t_blog` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `appreciation` bit(1) DEFAULT NULL,
  `commentabled` bit(1) DEFAULT NULL,
  `content` longtext,
  `description` varchar(255) DEFAULT NULL,
  `createTime` datetime DEFAULT NULL,
  `firstPicture` varchar(255) DEFAULT NULL,
  `flag` varchar(255) DEFAULT NULL,
  `published` bit(1) DEFAULT NULL,
  `recommened` bit(1) DEFAULT NULL,
  `shareStatement` bit(1) DEFAULT NULL,
  `title` varchar(255) DEFAULT NULL,
  `updateTime` datetime DEFAULT NULL,
  `views` int(11) DEFAULT NULL,
  `type_id` bigint(20) DEFAULT NULL,
  `user_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK292449gwg5yf7ocdlmswv9w4j` (`type_id`),
  KEY `FK8ky5rrsxh01nkhctmo7d48p82` (`user_id`),
  CONSTRAINT `FK292449gwg5yf7ocdlmswv9w4j` FOREIGN KEY (`type_id`) REFERENCES `t_type` (`id`),
  CONSTRAINT `FK8ky5rrsxh01nkhctmo7d48p82` FOREIGN KEY (`user_id`) REFERENCES `t_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

/*Data for the table `t_blog` */

insert  into `t_blog`(`id`,`appreciation`,`commentabled`,`content`,`description`,`createTime`,`firstPicture`,`flag`,`published`,`recommened`,`shareStatement`,`title`,`updateTime`,`views`,`type_id`,`user_id`) values (9,NULL,NULL,'### 1、SpringDataJpa + SpringBoot的no-session 异常\r\n使用hibernate 或者 springDataJpa 一个经典的问题，就是延迟加载的问题 也就是no-session 异常。\r\n\r\n因为我的实体类中有个一对多的关系，当你访问 该实体类的时候，仅仅返回基本属性，关联的多方的对象并不返回\r\n\r\n\r\n只有访问到的时候它才会从数据库中提取 需要的数据，这就是所谓lazy laoding。\r\n\r\n```\r\n<!--页面中有访问type实体类中的blogs对象；type与blog是一对多的关系-->\r\nth:text=\"${#arrays.length(type.blogs)}\"\r\n```\r\n\r\n\r\n但是在我们的系统中，session是被立即关闭的，也就是在读取了基本属性后，session 已经 close了，再进行 lazy loaiding 就会有异常。\r\n\r\n\r\n解决方法就是配置 OpenSessionInViewFilter 过滤器（Hibernate）\r\n或者OpenEntityManagerInViewFilter 过滤器（SpringDataJpa）。\r\n\r\n反正也是springDataJpa 肯定是需要OpenEntityManagerInViewFilter, 只是没有了web.xml文件。\r\n所以…在启动类中，初始化一个bean即可\r\n\r\n\r\n```\r\n@Bean\r\npublic OpenEntityManagerInViewFilter openEntityManagerInViewFilter() {\r\n    return new OpenEntityManagerInViewFilter();\r\n}\r\n```\r\n\r\n\r\n```\r\norg.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.lanjy.blog.po.Type.blogs, could not initialize proxy - no Session\r\n	at org.hibernate.collection.internal.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:582)\r\n	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:201)\r\n	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:561)\r\n	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:132)\r\n	at org.hibernate.collection.internal.PersistentBag.toString(PersistentBag.java:509)\r\n	at org.springframework.util.ObjectUtils.nullSafeToString(ObjectUtils.java:693)\r\n	at org.springframework.core.convert.ConversionFailedException.<init>(ConversionFailedException.java:52)\r\n	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:46)\r\n	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:191)\r\n	at org.springframework.expression.spel.support.StandardTypeConverter.convertValue(StandardTypeConverter.java:70)\r\n	at org.springframework.expression.spel.support.ReflectionHelper.convertArguments(ReflectionHelper.java:272)\r\n	at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:113)\r\n	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:138)\r\n	at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:54)\r\n	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:384)\r\n	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:89)\r\n	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:111)\r\n	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:334)\r\n	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)\r\n	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:165)\r\n	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)\r\n	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)\r\n	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)\r\n	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:126)\r\n	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)\r\n	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)\r\n	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)\r\n	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)\r\n	at org.thymeleaf.engine.OpenElementTag.beHandled(OpenElementTag.java:205)\r\n	at org.thymeleaf.engine.Model.process(Model.java:282)\r\n	at org.thymeleaf.engine.Model.process(Model.java:290)\r\n```\r\n','使用hibernate 或者 springDataJpa 一个经典的问题，就是延迟加载的问题 也就是no-session 异常。','2020-03-11 17:28:46','/static/image/jenny.jpg','原创','','',NULL,'Jpa的懒加载问题处理','2020-03-11 17:29:08',5,5,1),(17,NULL,'','```html\r\nJava题库(一面)\r\n一、主要考察两个方面的知识\r\n1、Java基础及底层原理\r\n2、Mysql原理，优化，设计\r\n二、Java基础\r\n1、HashMap数据结构，扩容，reHash方法，负载因子，初始容量，1.8红黑树的优化？\r\n2、ConcurrentHashMap,HashTable实现原理及区别？\r\n3、volatile作用及原理，多线程可见性，内存屏障？\r\n4、Jvm内存模型，虚拟机栈执行过程？\r\n5、Gc算法，堆内存及分代，eden,s0,s1，垃圾收集器G1,cms区别？\r\n6、Java8新特性，lambda，stream，collection是否用过?\r\n7、手写单例模式，饿汉，懒汉，内部类（可选）？\r\n8、Jvm调优方法?\r\n9、线程状态及转移？\r\n10、synchronized,lock的区别？\r\n11、类加载机制，双亲委派模型？\r\n12、AQS、CAS原理？\r\n13、sleep，wait的区别？\r\n14、StringBuilder,StringBuffer区别？\r\n15、接口和抽象类的区别？\r\n16、编译时异常与运行时异常的区别？\r\n17、NIO原理？\r\n18、线程与进程的区别？\r\n19、创建线程有几种不同的方式？\r\n20、hashCode()和equals()方法的作用？\r\n三、Mysql基础\r\n1、事务特性，ACID，脏读，幻读，不可重复读，隔离级别？\r\n2、引擎区别，innodb,myISAM区别？\r\n3、索引原理，主键索引，聚集索引，非聚集索引？\r\n4、索引覆盖概念？\r\n5、索引匹配原则，是否知道左匹配？\r\n6、数据库慢查询，优化手段？\r\n7、B+树结构？\r\n8、datetime，timestamp区别？\r\n9、锁的类别，IS,IX,S,X锁？\r\n10、悲观锁，乐观锁？\r\n四、算法(可选)\r\n1、N个数中如何找出最大的前1个数，最大的前2个数？\r\n2、N个数中，有一个数字出现的次数超过了一半，如何快速找出这个数？\r\n```','Java题库(一面)','2019-11-01 08:01:55','/static/image/0.jfif','转载','','','','Java题库(一面)','2020-02-12 12:02:51',133,1,1),(18,'','','##### 一、连接MySQL。 \r\n	格式： mysql -h主机地址 -u用户名 －p用户密码\r\n###### 1、连接到本机上的MySQL。\r\n	首先打开DOS窗口，然后进入目录mysql\\bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码.\r\n如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql>\r\n\r\n###### 2、连接到远程主机上的MySQL。\r\n	假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：\r\nmysql -h110.110.110.110 -u root -p 123;（注:u与root之间可以不用加空格，其它也一样）\r\n\r\n###### 3、退出MySQL命令\r\n	exit （回车）\r\n\r\n------------\r\n\r\n\r\n\r\n##### 二、修改密码。 \r\n	格式：mysqladmin -u用户名 -p旧密码 password 新密码\r\n###### 1、给root加个密码ab12。\r\n	首先在DOS下进入目录mysql\\bin，\r\n	然后键入以下命令:mysqladmin -u root -password ab12\r\n	注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。\r\n\r\n###### 2、再将root的密码改为djg345。\r\n	mysqladmin -u root -p ab12 password djg345\r\n\r\n\r\n##### 三、增加新用户。 \r\n	(注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符）\r\n	格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”\r\n\r\n1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：\r\n```sql\r\ngrant select,insert,update,delete on *.* to test1@”%” Identified by “abc”;\r\n```\r\n但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。\r\n\r\n\r\n2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），\r\n这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。\r\n```sql\r\ngrant select,insert,update,delete on mydb.* to test2@localhost identified by “abc”;\r\n```\r\n如果你不想test2有密码，可以再打一个命令将密码消掉。\r\n```sql\r\ngrant select,insert,update,delete on mydb.* to test2@localhost identified by “”;\r\n```\r\n\r\n','MySQL的基础操作：连接MYSQL；修改密码；增加新用户；','2020-02-11 21:12:31','/static/image/0.jfif','原创','','',NULL,'MySQL的基础操作','2020-02-11 21:34:05',2568,3,1),(19,'','','##### 一、操作技巧\r\n	1、如果你打命令时，回车后发现忘记加分号，你无须重打一遍命令，只要打个分号回车就可以了。也就是说你可以把一个完整的命令分成几行来打，完后用分号作结束标志就OK。\r\n	2、你可以使用光标上下键调出以前的命令。\r\n##### 二、显示命令\r\n###### 1、显示当前数据库服务器中的数据库列表：\r\n```sql\r\nmysql> SHOW DATABASES;\r\n```\r\n注意：mysql库里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。\r\n###### 2、显示数据库中的数据表：\r\n	mysql> USE 库名；\r\n	mysql> SHOW TABLES;\r\n##### 3、显示数据表的结构：\r\n	mysql> DESCRIBE 表名;\r\n##### 4、建立数据库：\r\n	mysql> CREATE DATABASE 库名;\r\n##### 5、建立数据表：\r\n	mysql> USE 库名;\r\n	mysql> CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1));\r\n##### 6、删除数据库：\r\n	mysql> DROP DATABASE 库名;\r\n##### 7、删除数据表：\r\n	mysql> DROP TABLE 表名；\r\n##### 8、将表中记录清空：\r\n	mysql> DELETE FROM 表名;\r\n##### 9、显示表中的记录：\r\n	mysql> SELECT * FROM 表名;\r\n##### 10、往表中插入记录：\r\n	mysql> INSERT INTO 表名 VALUES (”hyq”,”M”);\r\n##### 11、更新表中数据：\r\n	mysql-> UPDATE 表名 SET 字段名1=\'a\',字段名2=\'b\' WHERE 字段名3=\'c\';\r\n##### 12、用文本方式将数据装入数据表中：\r\n	mysql> LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE 表名;\r\n##### 13、导入.sql文件命令：\r\n	mysql> USE 数据库名;\r\n	mysql> SOURCE d:/mysql.sql;\r\n##### 14、命令行修改root密码：\r\n	mysql> UPDATE mysql.user SET password=PASSWORD(\'新密码\') WHERE User=\'root\';\r\n	mysql> FLUSH PRIVILEGES;\r\n##### 15、显示use的数据库名：\r\n	mysql> SELECT DATABASE();\r\n##### 16、显示当前的user：\r\n	mysql> SELECT USER();\r\n##### 三、一个建库和建表以及插入数据的实例\r\n```sql\r\ndrop database if exists school; //如果存在SCHOOL则删除\r\ncreate database school; //建立库SCHOOL\r\nuse school; //打开库SCHOOL\r\ncreate table teacher //建立表TEACHER\r\n(\r\nid int(3) auto_increment not null primary key,\r\nname char(10) not null,\r\naddress varchar(50) default ‘深圳\',\r\nyear date\r\n); //建表结束\r\n//以下为插入字段\r\ninsert into teacher values(”,\'allen\',\'大连一中\',\'1976-10-10′);\r\ninsert into teacher values(”,\'jack\',\'大连二中\',\'1975-12-23′);\r\n```\r\n如果你在mysql提示符键入上面的命令也可以，但不方便调试。\r\n（1）你可以将以上命令原样写入一个文本文件中，假设为school.sql，然后复制到c:\\\\下，并在DOS状态进入目录\\\\mysql\\\\bin，然后键入以下命令：\r\n```sql\r\nmysql -uroot -p密码 < c:\\\\school.sql\r\n```\r\n如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。\r\n（2）或者进入命令行后使用\r\n```sql\r\nmysql> source c:\\\\school.sql; \r\n```\r\n也可以将school.sql文件导入数据库中。\r\n##### 四、将文本数据转到数据库中 \r\n###### 1、文本数据应符合的格式：字段数据之间用tab键隔开，null值用\\\\n来代替.例：\r\n	3 rose 大连二中 1976-10-10\r\n	4 mike 大连一中 1975-12-23\r\n假设你把这两组数据存为school.txt文件，放在c盘根目录下。\r\n###### 2、数据传入命令 load data local infile “c:\\\\school.txt” into table 表名;\r\n注意：你最好将文件复制到\\\\mysql\\\\bin目录下，并且要先用use命令打表所在的库。\r\n##### 五、备份数据库：（命令在DOS的\\\\mysql\\\\bin目录下执行） \r\n###### 1.导出整个数据库\r\n导出文件默认是存在mysql\\bin目录下\r\n```sql\r\nmysqldump -u 用户名 -p 数据库名 > 导出的文件名\r\nmysqldump -u user_name -p123456 database_name > outfile_name.sql\r\n```\r\n###### 2.导出一个表\r\n```sql\r\nmysqldump -u 用户名 -p 数据库名 表名> 导出的文件名\r\nmysqldump -u user_name -p database_name table_name > outfile_name.sql\r\n```\r\n###### 3.导出一个数据库结构\r\n```sql\r\nmysqldump -u user_name -p -d –add-drop-table database_name > outfile_name.sql\r\n```\r\n-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table\r\n###### 4.带语言参数导出\r\n```sql\r\nmysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name > outfile_name.sql\r\n\r\n```\r\n###### 1. 备份数据库 \r\n```sql\r\nmysqldump -uroot -p test_db > test_db.sql \r\n```\r\n###### 2. 恢复数据库 \r\n```sql\r\nmysql -uroot -p test_db < test_db.sql \r\n```\r\n###### 3. 创建权限 \r\n```sql\r\ngrant all privileges on test_db.* to test_db@\'localhost\' identified by \'123456\';\r\n``` \r\n兼容mysql4.1之前模式： \r\n```sql\r\nupdate mysql.user set password=old_password(\'123456\') where user=\'test_db\'; \r\n```\r\n###### 4. 忘记密码 \r\n在“my.cnf”或“my.ini”文件的“mysqld”配置段添加“skip-grant-tables”，然后重新启动mysql即可登录修改root密码。 \r\n','这篇我是MYSQL中有关数据库方面的操作。注意：你必须首先登录到MYSQL中，以下操作都是在MYSQL的提示符下进行的，而且每个命令以分号结束。','2019-12-01 10:20:57','/static/image/0.jfif','原创','','','','MySQL的常见操作',NULL,12326,3,1),(20,'','','#### 线程编程方面    \r\n##### 60、java中有几种方法可以实现一个线程？用什么关键字修饰同步方法? stop()和suspend()方法为何不推荐使用？\r\n	答：有两种实现方法，分别是继承Thread类与实现Runnable接口\r\n	用synchronized关键字修饰同步方法\r\n	反对使用stop()，是因为它不安全。它会解除由线程获取的所有锁定，而且如果对象处于一种不连贯状态，那么其他线程能在那种状态下检查和修改它们。结果很难检查出真正的问题所在。suspend()方法容易发生死锁。调用suspend()的时候，目标线程会停下来，但却仍然持有在这之前获得的锁定。此时，其他任何线程都不能访问锁定的资源，除非被\"挂起\"的线程恢复运行。对任何线程来说，如果它们想恢复目标线程，同时又试图使用任何一个锁定的资源，就会造成死锁。所以不应该使用suspend()，而应在自己的Thread类中置入一个标志，指出线程应该活动还是挂起。若标志指出线程应该挂起，便用wait()命其进入等待状态。若标志指出线程应当恢复，则用一个notify()重新启动线程。\r\n##### 61、sleep() 和 wait() 有什么区别? \r\n	答：sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。\r\n	wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。\r\n##### 62、同步和异步有何异同，在什么情况下分别使用他们？举例说明。\r\n	答：如果数据将在线程间共享。例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就是共享数据，必须进行同步存取。\r\n	当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步编程，在很多情况下采用异步途径往往更有效率。\r\n##### 63、启动一个线程是用run()还是start()?\r\n	答：启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM调度并执行。这并不意味着线程就会立即运行。run()方法可以产生必须退出的标志来停止一个线程。 \r\n##### 64、当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?64、当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?\r\n	答：不能，一个对象的一个synchronized方法只能由一个线程访问。\r\n##### 65、请说出你所知道的线程同步的方法。\r\n	答：wait():使一个线程处于等待状态，并且释放所持有的对象的lock。\r\n	sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。\r\n	notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。\r\n	Allnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。\r\n##### 66、多线程有几种实现方法,都是什么?同步有几种实现方法,都是什么? \r\n	答：多线程有两种实现方法，分别是继承Thread类与实现Runnable接口 \r\n	同步的实现方面有两种，分别是synchronized,wait与notify\r\n##### 67、线程的基本概念、线程的基本状态以及状态之间的关系\r\n	答：线程指在程序执行过程中，能够执行程序代码的一个执行单位，每个程序至少都有一个线程，也就是程序本身。\r\n	Java中的线程有四种状态分别是：运行、就绪、挂起、结束\r\n##### 68、简述synchronized和java.util.concurrent.locks.Lock的异同 ？\r\n	答：主要相同点：Lock能完成synchronized所实现的所有功能\r\n	主要不同点：Lock有比synchronized更精确的线程语义和更好的性能。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且必须在finally从句中释放。 \r\n#### 	Jsp方面 \r\n##### 69、forward 和redirect的区别69、forward 和redirect的区别\r\n	答：forward是服务器请求资源，服务器直接访问目标地址的URL，把那个URL的响应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪儿来的，所以它的地址栏中还是原来的地址。\r\n		redirect就是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址，一般来说浏览器会用刚才请求的所有参数重新请求，所以session,request参数都可以获取。\r\n##### 70、jsp有哪些内置对象?作用分别是什么?\r\n	答：JSP共有以下9种基本内置组件（可与ASP的6种内部组件相对应）： \r\n	 request 用户端请求，此请求会包含来自GET/POST请求的参数 \r\n	   response 网页传回用户端的回应 \r\n	   pageContext 网页的属性是在这里管理 \r\n	   session 与请求有关的会话期 \r\n	   application servlet 正在执行的内容 \r\n	   out 用来传送回应的输出\r\n	   config servlet的构架部件 \r\n	   page JSP网页本身 \r\n	   exception 针对错误网页，未捕捉的例外 \r\n##### 71、jsp有哪些动作?作用分别是什么?\r\n	答:JSP共有以下6种基本动作\r\n	   jsp:include：在页面被请求的时候引入一个文件。 \r\n	   jsp:useBean：寻找或者实例化一个JavaBean。 \r\n	   jsp:setProperty：设置JavaBean的属性。 \r\n	   jsp:getProperty：输出某个JavaBean的属性。 \r\n	   jsp:forward：把请求转到一个新的页面。 \r\n	   jsp:plugin：根据浏览器类型为Java插件生成OBJECT或EMBED标记\r\n##### 72、JSP中动态INCLUDE与静态INCLUDE的区别？ 72、JSP中动态INCLUDE与静态INCLUDE的区别？ \r\n	答：动态INCLUDE用jsp:include动作实现\r\n	   <jsp:include page=\"included.jsp\" flush=\"true\" />它总是会检查所含文件中的变化，适合用于包含动态页面，并且可以带参数\r\n	   静态INCLUDE用include伪码实现,定不会检查所含文件的变化，适用于包含静态页面\r\n	   <%@ include file=\"included.htm\" %>\r\n##### 73、两种跳转方式分别是什么?有什么区别?\r\n	答：有两种，分别为：\r\n	  <jsp:include page=\"included.jsp\" flush=\"true\">\r\n	  <jsp:forward page= \"nextpage.jsp\"/>\r\n	前者页面不会转向include所指的页面，只是显示该页的结果，主页面还是原来的页面。执行完后还会回来，相当于函数调用。并且可以带参数.后者完全转向新页面，不会再回来。相当于go to 语句。\r\n##### 74、JSP的内置对象及方法。\r\n	答：request表示HttpServletRequest对象。它包含了有关浏览器请求的信息，并且提供了几个用于获取cookie, header, 和session数据的有用的方法。 \r\n		response表示HttpServletResponse对象，并提供了几个用于设置送回 浏览器的响应的方法（如cookies,头信息等） \r\n		out对象是javax.jsp.JspWriter的一个实例，并提供了几个方法使你能用于向浏览器回送输出结果。 \r\n		pageContext表示一个javax.servlet.jsp.PageContext对象。它是用于方便存取各种范围的名字空间、servlet相关的对象的API，并且包装了通用的servlet相关功能的方法。 \r\n		session表示一个请求的javax.servlet.http.HttpSession对象。Session可以存贮用户的状态信息 \r\n		applicaton 表示一个javax.servle.ServletContext对象。这有助于查找有关servlet引擎和servlet环境的信息 \r\n		config表示一个javax.servlet.ServletConfig对象。该对象用于存取servlet实例的初始化参数。 \r\n		page表示从该页面产生的一个servlet实例 \r\n	exception\r\n#### Servlet方面 \r\n##### 75、说一说Servlet的生命周期?\r\n	答:servlet有良好的生存期的定义，包括加载和实例化、初始化、处理请求以及服务结束。这个生存期由javax.servlet.Servlet接口的init,service和destroy方法表达。 Servlet被服务器实例化后，容器运行其init方法，请求到达时运行其service方法，service方法自动派遣运行与请求对应的doXXX方法（doGet，doPost）等，当服务器决定将实例销毁的时候调用其destroy方法。\r\n	与cgi的区别在于servlet处于服务器进程中，它通过多线程方式运行其service方法，一个实例可以服务于多个请求，并且其实例一般不会销毁，而CGI对每个请求都产生新的进程，服务完成后就销毁，所以效率上低于servlet。\r\n##### 76、JAVA SERVLET API中forward() 与redirect()的区别？\r\n	答:前者仅是容器中控制权的转向，在客户端浏览器地址栏中不会显示出转向后的地址；后者则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中可以看到跳转后的链接地址。所以，前者更加高效，在前者可以满足需要时，尽量使用forward()方法，并且，这样也有助于隐藏实际的链接。在有些情况下，比如，需要跳转到一个其它服务器上的资源，则必须使用sendRedirect()方法。\r\n##### 77、Servlet的基本架构\r\n	答：\r\n	public class ServletName extends HttpServlet {\r\n	  public void doPost(HttpServletRequest request, HttpServletResponse response) throws\r\n		  ServletException, IOException  {\r\n		  }\r\n	  public void doGet(HttpServletRequest request, HttpServletResponse response) throws\r\n		  ServletException, IOException  {\r\n		  }\r\n	} \r\n##### 78、什么情况下调用doGet()和doPost()？78、什么情况下调用doGet()和doPost()？\r\n	答：Jsp页面中的form标签里的method属性为get时调用doGet()，为post时调用doPost()。\r\n##### 79、servlet的生命周期\r\n	答：web容器加载servlet，生命周期开始。通过调用servlet的init()方法进行servlet的初始化。通过调用service()方法实现，根据请求的不同调用不同的do***()方法。结束服务，web容器调用servlet的destroy()方法。\r\n##### 80、如何现实servlet的单线程模式\r\n	答：<%@ page isThreadSafe=\"false\"%>\r\n##### 81、页面间对象传递的方法\r\n	答：request，session，application，cookie等\r\n##### 82、JSP和Servlet有哪些相同点和不同点，他们之间的联系是什么？ 82、JSP和Servlet有哪些相同点和不同点，他们之间的联系是什么？ \r\n	答：JSP是Servlet技术的扩展，本质上是Servlet的简易方式，更强调应用的外表表达。JSP编译后是\"类servlet\"。Servlet和JSP最主要的不同点在于，Servlet的应用逻辑是在Java文件中，并且完全从表示层中的HTML里分离开来。而JSP的情况是Java和HTML可以组合成一个扩展名为.jsp的文件。JSP侧重于视图，Servlet主要用于控制逻辑。\r\n##### 83、四种会话跟踪技术\r\n	答：会话作用域ServletsJSP 页面描述\r\n	page否是代表与一个页面相关的对象和属性。一个页面由一个编译好的 Java servlet 类（可以带有任何的 include 指令，但是没有 include 动作）表示。这既包括 servlet 又包括被编译成 servlet 的 JSP 页面\r\n	request是是代表与 Web 客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个 Web 组件（由于 forward 指令和 include 动作的关系）\r\n	session是是代表与用于某个 Web 客户机的一个用户体验相关的对象和属性。一个 Web 会话可以也经常会跨越多个客户机请求\r\n	application是是代表与整个 Web 应用程序相关的对象和属性。这实质上是跨越整个 Web 应用程序，包括多个页面、请求和会话的一个全局作用域\r\n##### 84、Request对象的主要方法\r\n	答：\r\n	setAttribute(String name,Object)：设置名字为name的request的参数值\r\n	getAttribute(String name)：返回由name指定的属性值\r\n	getAttributeNames()：返回request对象所有属性的名字集合，结果是一个枚举的实例\r\n	getCookies()：返回客户端的所有Cookie对象，结果是一个Cookie数组\r\n	getCharacterEncoding()：返回请求中的字符编码方式\r\n	getContentLength()：返回请求的Body的长度\r\n	getHeader(String name)：获得HTTP协议定义的文件头信息\r\n	getHeaders(String name)：返回指定名字的request Header的所有值，结果是一个枚举的实例\r\n	getHeaderNames()：返回所以request Header的名字，结果是一个枚举的实例\r\n	getInputStream()：返回请求的输入流，用于获得请求中的数据\r\n	getMethod()：获得客户端向服务器端传送数据的方法\r\n	getParameter(String name)：获得客户端传送给服务器端的有name指定的参数值\r\n	getParameterNames()：获得客户端传送给服务器端的所有参数的名字，结果是一个枚举的实例\r\n	getParameterValues(String name)：获得有name指定的参数的所有值\r\n	getProtocol()：获取客户端向服务器端传送数据所依据的协议名称\r\n	getQueryString()：获得查询字符串\r\n	getRequestURI()：获取发出请求字符串的客户端地址\r\n	getRemoteAddr()：获取客户端的IP地址\r\n	getRemoteHost()：获取客户端的名字\r\n	getSession([Boolean create])：返回和请求相关Session\r\n	getServerName()：获取服务器的名字\r\n	getServletPath()：获取客户端所请求的脚本文件的路径\r\n	getServerPort()：获取服务器的端口号\r\n	removeAttribute(String name)：删除请求中的一个属性\r\n##### 85、我们在web应用开发过程中经常遇到输出某种编码的字符，如iso8859-1等，如何输出一个某种编码的字符串？\r\n	答：\r\n	  Public String translate (String str) {\r\n		String tempStr = \"\";\r\n		try {\r\n		  tempStr = new String(str.getBytes(\"ISO-8859-1\"), \"GBK\");\r\n		  tempStr = tempStr.trim();\r\n		}\r\n		catch (Exception e) {\r\n		  System.err.println(e.getMessage());\r\n		}\r\n		return tempStr;\r\n	  }\r\n##### 86、Servlet执行时一般实现哪几个方法？86、Servlet执行时一般实现哪几个方法？\r\n	答：\r\n	public void init(ServletConfig config)\r\n	public ServletConfig getServletConfig()\r\n	public String getServletInfo()\r\n	public void service(ServletRequest request,ServletResponse response)\r\n	public void destroy() \r\n	Jdbc、Jdo方面 \r\n##### 87、Class.forName的作用?为什么要用?\r\n	答：调用该访问返回一个以字符串指定类名的类的对象。\r\n##### 88、Jdo是什么?88、Jdo是什么?\r\n	答：JDO是Java对象持久化的新的规范，为java data object的简称,也是一个用于存取某种数据仓库中的对象的标准化API。JDO提供了透明的对象存储，因此对开发人员来说，存储数据对象完全不需要额外的代码（如JDBC API的使用）。这些繁琐的例行工作已经转移到JDO产品提供商身上，使开发人员解脱出来，从而集中时间和精力在业务逻辑上。另外，JDO很灵活，因为它可以在任何数据底层上运行。JDBC只是面向关系数据库（RDBMS)JDO更通用，提供到任何数据底层的存储功能，比如关系数据库、文件、XML以及对象数据库（ODBMS）等等，使得应用可移植性更强。\r\n##### 89、说出数据连接池的工作机制是什么?\r\n	答：J2EE服务器启动时会建立一定数量的池连接，并一直维持不少于此数目的池连接。客户端程序需要连接时，池驱动程序会返回一个未使用的池连接并将其表记为忙。如果当前没有空闲连接，池驱动程序就新建一定数量的连接，新建连接的数量有配置参数决定。当使用的池连接调用完成后，池驱动程序将此连接表记为空闲，其他调用就可以使用这个连接。\r\n##### 90、Jdo是什么? \r\n	答：JDO是Java对象持久化的新的规范，为java data object的简称,也是一个用于存取某种数据仓库中的对象的标准化API。JDO提供了透明的对象存储，因此对开发人员来说，存储数据对象完全不需要额外的代码（如JDBC API的使用）。这些繁琐的例行工作已经转移到JDO产品提供商身上，使开发人员解脱出来，从而集中时间和精力在业务逻辑上。另外，JDO很灵活，因为它可以在任何数据底层上运行。JDBC只是面向关系数据库（RDBMS）JDO更通用，提供到任何数据底层的存储功能，比如关系数据库、文件、XML以及对象数据库（ODBMS）等等，使得应用可移植性更强。\r\n	Xml方面 \r\n##### 91、xml有哪些解析技术?区别是什么?\r\n	答：有DOM,SAX,STAX等\r\n	DOM:处理大型文件时其性能下降的非常厉害。这个问题是由DOM的树结构所造成的，这种结构占用的内存较多，而且DOM必须在解析文件之前把整个文档装入内存,适合对XML的随机访问SAX:不现于DOM,SAX是事件驱动型的XML解析方式。它顺序读取XML文件，不需要一次全部装载整个文件。当遇到像文件开头，文档结束，或者标签开头与标签结束时，它会触发一个事件，用户通过在其回调事件中写入处理代码来处理XML文件，适合对XML的顺序访问\r\n	STAX:Streaming API for XML (StAX)\r\n##### 92、你在项目中用到了xml技术的哪些方面?如何实现的?\r\n	答：用到了数据存贮，信息配置两方面。在做数据交换平台时，将不能数据源的数据组装成XML文件，然后将XML文件压缩打包加密后通过网络传送给接收者，接收解密与解压缩后再同XML文件中还原相关信息进行处理。在做软件配置时，利用XML可以很方便的进行，软件的各种配置参数都存贮在XML文件中。\r\n##### 93、XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？ \r\n	答：a: 两种形式 dtd  schema，b: 本质区别:schema本身是xml的，可以被XML解析器解析(这也是从DTD上发展schema的根本目的)，c:有DOM,SAX,STAX等 \r\n		DOM:处理大型文件时其性能下降的非常厉害。这个问题是由DOM的树结构所造成的，这种结构占用的内存较多，而且DOM必须在解析文件之前把整个文档装入内存,适合对XML的随机访问\r\n	SAX:不现于DOM,SAX是事件驱动型的XML解析方式。它顺序读取XML文件，不需要一次全部装载整个文件。当遇到像文件开头，文档结束，或者标签开头与标签结束时，它会触发一个事件，用户通过在其回调事件中写入处理代码来处理XML文件，适合对XML的顺序访问 \r\n	STAX:Streaming API for XML (StAX)\r\n\r\n','java面试之必备','2020-02-12 12:10:00','/static/image/0.jfif','原创','','','','java面试题',NULL,55548,3,1),(21,'','','```java\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport javax.servlet.*;\r\nimport javax.servlet.http.*;\r\n/**\r\n * <p>Title: servlet读取cookie</p>\r\n * <p>Description: 这个servlet演示怎样创建和获取cookie并设置cookie的期限</p>\r\n * <p>Copyright: Copyright (c) 2003</p>\r\n * <p>Filename: CookieCounter.java</p>\r\n * @author 杜江\r\n * @version 1.0\r\n */\r\n//必须继承HttpServlet类\r\npublic class CookieCounter extends HttpServlet {\r\n  private int pageCount = 0;\r\n\r\n/**\r\n *<br>方法说明：初始化\r\n *<br>输入参数：ServletConfig config 服务器配置对象\r\n *<br>返回类型：\r\n */\r\n\r\n  public void init(ServletConfig config) throws ServletException  {\r\n    super.init(config);\r\n  }\r\n/**\r\n *<br>方法说明：实现service方法\r\n *<br>输入参数：HttpServletRequest req 客户请求对象\r\n *<br>输入参数：HttpServletResponse res 服务器应答对象\r\n *<br>返回类型：\r\n */\r\n  public void service(HttpServletRequest req, HttpServletResponse res)\r\n       throws IOException\r\n  {\r\n    boolean cookieFound = false;\r\n    Cookie thisCookie = null;\r\n    \r\n    // 设置内容类型\r\n    res.setContentType(\"text/html; charset=GB2312\");\r\n    // 调用getWriter()\r\n    PrintWriter out = res.getWriter();\r\n    \r\n    // 从请求获取coolies\r\n    Cookie[] cookies = req.getCookies();\r\n    \r\n    if(cookies!=null){\r\n      for(int i=0; i < cookies.length; i++) {\r\n        thisCookie = cookies[i];\r\n        //检查是否存在CookieCount数据\r\n        if (thisCookie.getName().equals(\"CookieCount\")) {\r\n          cookieFound = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (cookieFound == false) {\r\n      // 创建新的Cookie并设置它的存活期\r\n      thisCookie = new Cookie(\"CookieCount\", \"1\");\r\n      thisCookie.setMaxAge(60*1);\r\n      // 在response对象中加入cookie\r\n      res.addCookie(thisCookie);\r\n    }\r\n    //输出页面\r\n    out.println(\"<html><head>\\n\" + \"<title>Cookie计数器</title></head><body>\\n\" +\r\n                \"<center><h1>Cookie 计数器</h1></center></font>\");\r\n    pageCount++;\r\n    out.println(\"<p>\");\r\n    out.println(\"<font color=blue size=+1>\");\r\n    out.println(\"<p><br><br><br>这个页面您已经拜访了 \" + pageCount + \r\n                \" 次.\\n\");\r\n    \r\n    // 显示客户端详细信息,是否存在计数器cookie\r\n    if (cookieFound) {\r\n      int cookieCount = Integer.parseInt(thisCookie.getValue());\r\n      cookieCount++;\r\n      // 设置cookie的新值, 加到相应对象中\r\n      thisCookie.setValue(String.valueOf(cookieCount));\r\n      thisCookie.setMaxAge(10);\r\n      res.addCookie(thisCookie);\r\n      \r\n      out.println(\"<p>这是你近10秒内第 \" +\r\n                  thisCookie.getValue() +\r\n                  \" 次拜访这一页\\n\");\r\n      \r\n    } else {\r\n      out.println(\"<p>你在近10秒内没有拜访过此页或者你的浏览器不支持cookie \"+\r\n                  \"如果你的浏览器支持cookie，请确认是否打开了！\\n\");\r\n    }\r\n    out.println(\"</body></html>\");\r\n    \r\n  }\r\n}\r\n\r\n\r\n```','CookieCounter ','2020-02-12 12:11:10','/static/image/0.jfif','原创','','','','CookieCounter ',NULL,6751,1,1),(22,'','','```java\r\nimport java.io.BufferedReader;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.PrintWriter;\r\nimport java.net.URL;\r\nimport java.net.URLConnection;\r\n\r\npublic class Test {\r\n\r\n	/**\r\n	 * @param args\r\n	 */\r\n	public static void main(String[] args) {\r\n		try {\r\n			 URL url = new URL(\"http://jj.24365pt.com/index.jhtml\");\r\n\r\n			 URLConnection conn = url.openConnection();\r\n			 conn.setDoOutput(true);\r\n			 InputStream in = null;\r\n			 in = url.openStream();\r\n			 String content = pipe(in,\"utf-8\");\r\n			 System.out.println(content);\r\n		} catch (Exception e) {\r\n			e.printStackTrace();\r\n		}\r\n	}\r\n\r\n	static String pipe(InputStream in,String charset) throws IOException {\r\n        StringBuffer s = new StringBuffer();\r\n        if(charset==null||\"\".equals(charset)){\r\n        	charset=\"utf-8\";\r\n        }\r\n        String rLine = null;\r\n        BufferedReader bReader = new BufferedReader(new InputStreamReader(in,charset));\r\n        PrintWriter pw = null;\r\n        \r\n		FileOutputStream fo = new FileOutputStream(\"../index.html\");\r\n		OutputStreamWriter writer = new OutputStreamWriter(fo, \"utf-8\");\r\n		pw = new PrintWriter(writer);\r\n        while ( (rLine = bReader.readLine()) != null) {\r\n            String tmp_rLine = rLine;\r\n            int str_len = tmp_rLine.length();\r\n            if (str_len > 0) {\r\n              s.append(tmp_rLine);\r\n              pw.println(tmp_rLine);\r\n              pw.flush();\r\n            }\r\n            tmp_rLine = null;\r\n       }\r\n        in.close();\r\n        pw.close();\r\n        return s.toString();\r\n	}\r\n}\r\n\r\n```','[工具类] java抓取网页 .java','2020-02-12 12:12:07','/static/image/0.jfif','原创','','','','[工具类] java抓取网页 .java',NULL,2354,1,1),(23,'','','```java\r\npackage com.common.time;\r\n\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\n\r\n/**\r\n * \r\n * 功能描述：\r\n * \r\n * @author Administrator\r\n * @Date Jul 19, 2008\r\n * @Time 9:47:53 AM\r\n * @version 1.0\r\n */\r\npublic class DateUtil {\r\n\r\n	public static Date date = null;\r\n\r\n	public static DateFormat dateFormat = null;\r\n\r\n	public static Calendar calendar = null;\r\n\r\n	/**\r\n	 * 功能描述：格式化日期\r\n	 * \r\n	 * @param dateStr\r\n	 *            String 字符型日期\r\n	 * @param format\r\n	 *            String 格式\r\n	 * @return Date 日期\r\n	 */\r\n	public static Date parseDate(String dateStr, String format) {\r\n		try {\r\n			dateFormat = new SimpleDateFormat(format);\r\n			String dt = dateStr.replaceAll(\"-\", \"/\");\r\n			if ((!dt.equals(\"\")) && (dt.length() < format.length())) {\r\n				dt += format.substring(dt.length()).replaceAll(\"[YyMmDdHhSs]\",\r\n						\"0\");\r\n			}\r\n			date = (Date) dateFormat.parse(dt);\r\n		} catch (Exception e) {\r\n		}\r\n		return date;\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：格式化日期\r\n	 * \r\n	 * @param dateStr\r\n	 *            String 字符型日期：YYYY-MM-DD 格式\r\n	 * @return Date\r\n	 */\r\n	public static Date parseDate(String dateStr) {\r\n		return parseDate(dateStr, \"yyyy/MM/dd\");\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：格式化输出日期\r\n	 * \r\n	 * @param date\r\n	 *            Date 日期\r\n	 * @param format\r\n	 *            String 格式\r\n	 * @return 返回字符型日期\r\n	 */\r\n	public static String format(Date date, String format) {\r\n		String result = \"\";\r\n		try {\r\n			if (date != null) {\r\n				dateFormat = new SimpleDateFormat(format);\r\n				result = dateFormat.format(date);\r\n			}\r\n		} catch (Exception e) {\r\n		}\r\n		return result;\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：\r\n	 * \r\n	 * @param date\r\n	 *            Date 日期\r\n	 * @return\r\n	 */\r\n	public static String format(Date date) {\r\n		return format(date, \"yyyy/MM/dd\");\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：返回年份\r\n	 * \r\n	 * @param date\r\n	 *            Date 日期\r\n	 * @return 返回年份\r\n	 */\r\n	public static int getYear(Date date) {\r\n		calendar = Calendar.getInstance();\r\n		calendar.setTime(date);\r\n		return calendar.get(Calendar.YEAR);\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：返回月份\r\n	 * \r\n	 * @param date\r\n	 *            Date 日期\r\n	 * @return 返回月份\r\n	 */\r\n	public static int getMonth(Date date) {\r\n		calendar = Calendar.getInstance();\r\n		calendar.setTime(date);\r\n		return calendar.get(Calendar.MONTH) + 1;\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：返回日份\r\n	 * \r\n	 * @param date\r\n	 *            Date 日期\r\n	 * @return 返回日份\r\n	 */\r\n	public static int getDay(Date date) {\r\n		calendar = Calendar.getInstance();\r\n		calendar.setTime(date);\r\n		return calendar.get(Calendar.DAY_OF_MONTH);\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：返回小时\r\n	 * \r\n	 * @param date\r\n	 *            日期\r\n	 * @return 返回小时\r\n	 */\r\n	public static int getHour(Date date) {\r\n		calendar = Calendar.getInstance();\r\n		calendar.setTime(date);\r\n		return calendar.get(Calendar.HOUR_OF_DAY);\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：返回分钟\r\n	 * \r\n	 * @param date\r\n	 *            日期\r\n	 * @return 返回分钟\r\n	 */\r\n	public static int getMinute(Date date) {\r\n		calendar = Calendar.getInstance();\r\n		calendar.setTime(date);\r\n		return calendar.get(Calendar.MINUTE);\r\n	}\r\n\r\n	/**\r\n	 * 返回秒钟\r\n	 * \r\n	 * @param date\r\n	 *            Date 日期\r\n	 * @return 返回秒钟\r\n	 */\r\n	public static int getSecond(Date date) {\r\n		calendar = Calendar.getInstance();\r\n		calendar.setTime(date);\r\n		return calendar.get(Calendar.SECOND);\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：返回毫秒\r\n	 * \r\n	 * @param date\r\n	 *            日期\r\n	 * @return 返回毫秒\r\n	 */\r\n	public static long getMillis(Date date) {\r\n		calendar = Calendar.getInstance();\r\n		calendar.setTime(date);\r\n		return calendar.getTimeInMillis();\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：返回字符型日期\r\n	 * \r\n	 * @param date\r\n	 *            日期\r\n	 * @return 返回字符型日期 yyyy/MM/dd 格式\r\n	 */\r\n	public static String getDate(Date date) {\r\n		return format(date, \"yyyy/MM/dd\");\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：返回字符型时间\r\n	 * \r\n	 * @param date\r\n	 *            Date 日期\r\n	 * @return 返回字符型时间 HH:mm:ss 格式\r\n	 */\r\n	public static String getTime(Date date) {\r\n		return format(date, \"HH:mm:ss\");\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：返回字符型日期时间\r\n	 * \r\n	 * @param date\r\n	 *            Date 日期\r\n	 * @return 返回字符型日期时间 yyyy/MM/dd HH:mm:ss 格式\r\n	 */\r\n	public static String getDateTime(Date date) {\r\n		return format(date, \"yyyy/MM/dd HH:mm:ss\");\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：日期相加\r\n	 * \r\n	 * @param date\r\n	 *            Date 日期\r\n	 * @param day\r\n	 *            int 天数\r\n	 * @return 返回相加后的日期\r\n	 */\r\n	public static Date addDate(Date date, int day) {\r\n		calendar = Calendar.getInstance();\r\n		long millis = getMillis(date) + ((long) day) * 24 * 3600 * 1000;\r\n		calendar.setTimeInMillis(millis);\r\n		return calendar.getTime();\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：日期相减\r\n	 * \r\n	 * @param date\r\n	 *            Date 日期\r\n	 * @param date1\r\n	 *            Date 日期\r\n	 * @return 返回相减后的日期\r\n	 */\r\n	public static int diffDate(Date date, Date date1) {\r\n		return (int) ((getMillis(date) - getMillis(date1)) / (24 * 3600 * 1000));\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：取得指定月份的第一天\r\n	 * \r\n	 * @param strdate\r\n	 *            String 字符型日期\r\n	 * @return String yyyy-MM-dd 格式\r\n	 */\r\n	public static String getMonthBegin(String strdate) {\r\n		date = parseDate(strdate);\r\n		return format(date, \"yyyy-MM\") + \"-01\";\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：取得指定月份的最后一天\r\n	 * \r\n	 * @param strdate\r\n	 *            String 字符型日期\r\n	 * @return String 日期字符串 yyyy-MM-dd格式\r\n	 */\r\n	public static String getMonthEnd(String strdate) {\r\n		date = parseDate(getMonthBegin(strdate));\r\n		calendar = Calendar.getInstance();\r\n		calendar.setTime(date);\r\n		calendar.add(Calendar.MONTH, 1);\r\n		calendar.add(Calendar.DAY_OF_YEAR, -1);\r\n		return formatDate(calendar.getTime());\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：常用的格式化日期\r\n	 * \r\n	 * @param date\r\n	 *            Date 日期\r\n	 * @return String 日期字符串 yyyy-MM-dd格式\r\n	 */\r\n	public static String formatDate(Date date) {\r\n		return formatDateByFormat(date, \"yyyy-MM-dd\");\r\n	}\r\n\r\n	/**\r\n	 * 功能描述：以指定的格式来格式化日期\r\n	 * \r\n	 * @param date\r\n	 *            Date 日期\r\n	 * @param format\r\n	 *            String 格式\r\n	 * @return String 日期字符串\r\n	 */\r\n	public static String formatDateByFormat(Date date, String format) {\r\n		String result = \"\";\r\n		if (date != null) {\r\n			try {\r\n				SimpleDateFormat sdf = new SimpleDateFormat(format);\r\n				result = sdf.format(date);\r\n			} catch (Exception ex) {\r\n				ex.printStackTrace();\r\n			}\r\n		}\r\n		return result;\r\n	}\r\n\r\n	public static void main(String[] args) {\r\n		Date d = new Date();\r\n		// System.out.println(d.toString());\r\n//		System.out.println(formatDate(d).toString());\r\n		// System.out.println(getMonthBegin(formatDate(d).toString()));\r\n		// System.out.println(getMonthBegin(\"2008/07/19\"));\r\n		// System.out.println(getMonthEnd(\"2008/07/19\"));\r\n		System.out.println(addDate(d,15).toString());\r\n	}\r\n\r\n}\r\n\r\n```','日期工具类','2020-02-29 00:47:10','/static/image/jenny.jpg','原创','','','','[工具类] 日期DateUtil','2020-02-29 00:56:21',32,1,1);

/*Table structure for table `t_blog_tags` */

DROP TABLE IF EXISTS `t_blog_tags`;

CREATE TABLE `t_blog_tags` (
  `blogs_id` bigint(20) NOT NULL,
  `tags_id` bigint(20) NOT NULL,
  KEY `FK5feau0gb4lq47fdb03uboswm8` (`tags_id`),
  KEY `FKh4pacwjwofrugxa9hpwaxg6mr` (`blogs_id`),
  CONSTRAINT `FK5feau0gb4lq47fdb03uboswm8` FOREIGN KEY (`tags_id`) REFERENCES `t_tag` (`id`),
  CONSTRAINT `FKh4pacwjwofrugxa9hpwaxg6mr` FOREIGN KEY (`blogs_id`) REFERENCES `t_blog` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `t_blog_tags` */

insert  into `t_blog_tags`(`blogs_id`,`tags_id`) values (18,1),(19,1),(17,2),(20,2),(21,3),(22,3),(23,3),(9,1),(9,6);

/*Table structure for table `t_comment` */

DROP TABLE IF EXISTS `t_comment`;

CREATE TABLE `t_comment` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) DEFAULT NULL,
  `content` varchar(255) DEFAULT NULL,
  `createTime` datetime DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `nickName` varchar(255) DEFAULT NULL,
  `blog_id` bigint(20) DEFAULT NULL,
  `parentComment_id` bigint(20) DEFAULT NULL,
  `adminComment` bit(1) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FKke3uogd04j4jx316m1p51e05u` (`blog_id`),
  KEY `FK4jj284r3pb7japogvo6h72q95` (`parentComment_id`),
  CONSTRAINT `FK4jj284r3pb7japogvo6h72q95` FOREIGN KEY (`parentComment_id`) REFERENCES `t_comment` (`id`),
  CONSTRAINT `FKke3uogd04j4jx316m1p51e05u` FOREIGN KEY (`blog_id`) REFERENCES `t_blog` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8;

/*Data for the table `t_comment` */

insert  into `t_comment`(`id`,`avatar`,`content`,`createTime`,`email`,`nickName`,`blog_id`,`parentComment_id`,`adminComment`) values (8,'/static/image/jenny.jpg','小白的评论','2020-02-19 13:32:37','1615960786@qq.com','安吉拉',22,NULL,''),(9,'/static/image/jenny.jpg','小红回复小白的评论@小白','2020-02-19 13:32:55','1615960786@qq.com','安吉拉',22,8,''),(10,'/static/image/jenny.jpg','蜡笔小新的评论信息','2020-02-19 13:33:16','1615960786@qq.com','安吉拉',22,NULL,''),(11,'/static/image/jenny.jpg','毛毛虫的评论信息','2020-02-19 13:33:37','1615960786@qq.com','安吉拉',22,NULL,''),(12,'/static/image/jenny.jpg','111','2020-02-19 14:12:14','1615960786@qq.com','安吉拉',19,NULL,''),(13,'/static/image/jenny.jpg','111','2020-02-19 23:17:17','1615960786@qq.com','安吉拉',22,9,''),(14,'/static/image/jenny.jpg','阿斯蒂芬','2020-02-19 23:28:54','1615960786@qq.com','后裔',21,NULL,''),(15,'/static/image/elliot.jpeg','问问群若无','2020-02-19 23:29:50','1615960786@qq.com','后裔',21,14,'\0'),(16,'/static/image/joe.jpg','阿斯顿发斯蒂芬','2020-02-19 23:30:35','1615960786@qq.com','后裔',21,15,'\0'),(17,'/static/image/joe.jpg','阿阿斯顿发','2020-02-19 23:30:47','1615960786@qq.com','后裔',21,NULL,'\0'),(18,'/static/image/matt.jpg','阿斯蒂芬','2020-02-19 23:31:30','1615960786@qq.com','后裔',21,17,'\0'),(19,'/static/image/matt.jpg','好难啊','2020-02-19 23:51:55','1615960786@qq.com','后裔',20,NULL,'\0'),(20,'/static/image/jenny.jpg','不难的，理解就好了','2020-02-19 23:52:56','1615960786@qq.com','后裔',20,19,''),(21,'/static/image/jenny.jpg','111111111111','2020-02-19 23:53:16','1615960786@qq.com','后裔',20,NULL,''),(25,'/static/image/jenny.jpg','6666','2020-03-11 17:43:04','1615960786@qq.com','后裔',9,NULL,''),(26,'/static/image/jenny.jpg','谢谢支持','2020-03-11 18:23:07','1615960786@qq.com','后裔',23,NULL,''),(27,'/static/image/jenny.jpg','11','2020-03-13 00:57:06','1615960786@qq.com','后裔',23,NULL,''),(28,'/static/image/elliot.jpeg','ohmygod','2020-03-13 01:02:45','1615960786@qq.com','安吉拉',20,NULL,'\0'),(29,'/static/image/jenny.jpg','asdfas','2020-03-14 14:30:38','1615960786@qq.com','蓝景优',23,NULL,'');

/*Table structure for table `t_tag` */

DROP TABLE IF EXISTS `t_tag`;

CREATE TABLE `t_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

/*Data for the table `t_tag` */

insert  into `t_tag`(`id`,`name`) values (1,'基础'),(2,'面试'),(3,'工具类'),(6,'异常处理'),(10,'开发指南'),(11,'测试1');

/*Table structure for table `t_type` */

DROP TABLE IF EXISTS `t_type`;

CREATE TABLE `t_type` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Data for the table `t_type` */

insert  into `t_type`(`id`,`name`) values (1,'java'),(2,'html'),(3,'MySQL'),(4,'Springboot'),(5,'SpringDataJpa');

/*Table structure for table `t_user` */

DROP TABLE IF EXISTS `t_user`;

CREATE TABLE `t_user` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) DEFAULT NULL,
  `createTime` datetime DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `nickName` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `utype` int(11) DEFAULT NULL,
  `updateTime` datetime DEFAULT NULL,
  `username` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Data for the table `t_user` */

insert  into `t_user`(`id`,`avatar`,`createTime`,`email`,`nickName`,`password`,`utype`,`updateTime`,`username`) values (1,'/static/image/jenny.jpg','2020-02-05 09:17:03','1615960786@qq.com','蓝景优','e10adc3949ba59abbe56e057f20f883e',1,'2020-02-05 09:17:22','lanjy'),(2,'/static/image/elliot.jpeg','2020-02-05 09:17:03','1615960786@qq.com','安吉拉','e10adc3949ba59abbe56e057f20f883e',1,'2020-02-05 09:17:22','ajl'),(3,'/static/image/joe.jpg','2020-02-05 09:17:03','1615960786@qq.com','百里守约','e10adc3949ba59abbe56e057f20f883e',1,'2020-02-05 09:17:22','blsy'),(4,'/static/image/matt.jpg','2020-02-05 09:17:03','1615960786@qq.com','后裔','e10adc3949ba59abbe56e057f20f883e',1,'2020-02-05 09:17:22','hy'),(8,NULL,NULL,'1615960786@qq.com','娜可露露','343b1c4a3ea721b2d640fc8700db0f36',NULL,NULL,'nkll');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
